# 上位ディレクトリから .editorconfig 設定を継承する場合は、この行を削除
root = true

# C# ファイルの設定
[*.cs]

#################################
#### 1. コア設定 (基本フォーマット) ####
#################################

# インデントとスペース設定
indent_size = 4  ## インデント（字下げ）の幅を 4 スペースに統一する
indent_style = space  ## インデントにはタブ（Tab）ではなくスペース（Space）を使用する
trim_trailing_whitespace = true  ## 行末の余計な空白（ホワイトスペース）を自動削除する

# 文字エンコーディング設定
charset = utf-8-bom  ## ファイルのエンコーディングを UTF-8 BOM（識別情報付き）にする

# 改行設定
end_of_line = crlf  ## 改行コードを「CRLF（Windows標準）」に統一する
insert_final_newline = false  ## ファイルの末尾に余計な改行（空行）を追加しない

#################################
#### 2. .NET コードアクション ####
#################################

# 高度なメンバーの表示設定
dotnet_hide_advanced_members = false  ## Visual Studio の IntelliSense（コード補完）で「高度なメンバー」を隠さない

# メンバーの挿入位置の設定
dotnet_member_insertion_location = with_other_members_of_the_same_kind  ## 新しく追加するメンバーを、同じ種類のメンバーと一緒に配置する

# プロパティの自動生成方法
dotnet_property_generation_behavior = prefer_throwing_properties  ## プロパティの自動生成時に、例外をスローするプロパティを優先する

# 参照アセンブリの検索設定
dotnet_search_reference_assemblies = true  ## IntelliSense で、プロジェクトの参照アセンブリ（.dll）も検索対象に含める

#################################
#### 3. using の整理 ####
#################################

dotnet_separate_import_directive_groups = false  ## using のグループ分け（標準ライブラリ・外部ライブラリ・プロジェクト独自ライブラリ）を行わない
dotnet_sort_system_directives_first = false  ## `using System.*` を先頭に強制しない
file_header_template = unset  ## C# ファイルの先頭に、自動でコメントヘッダーを追加しない

#################################
#### 4. this. の設定 (修飾子) ####
#################################

dotnet_style_qualification_for_event = true:suggestion  ## イベントを `this.` で明示的に修飾することを推奨
dotnet_style_qualification_for_field = true:suggestion  ## フィールド（クラスのメンバー変数）を `this.` で明示的に修飾することを推奨
dotnet_style_qualification_for_method = true:suggestion  ## メソッド呼び出しに `this.` を付けることを推奨
dotnet_style_qualification_for_property = true:suggestion  ## プロパティの参照時に `this.` を付けることを推奨

#################################
#### 5. 型・演算子の設定 ####
#################################

dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion  ## ローカル変数・パラメータ・メンバーでは C# の組み込み型（`int` や `string` など）を使用
dotnet_style_predefined_type_for_member_access = false:suggestion  ## メンバーアクセス時には `System.Int32` ではなく `int` を使用しない

#################################
#### 6. かっこの設定 ####
#################################

dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity  ## 算術演算子の式では、明示的にかっこを付ける
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity  ## 他の二項演算子も明示的にかっこを付ける
dotnet_style_parentheses_in_other_operators = never_if_unnecessary  ## 不必要なかっこは省略
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity  ## 比較演算子（`==`, `!=` など）の式では、明示的にかっこを付ける

#################################
#### 7. アクセス修飾子の設定 ####
#################################

dotnet_style_require_accessibility_modifiers = for_non_interface_members  ## インターフェース以外のメンバーには明示的なアクセス修飾子を指定

#################################
#### 8. 命名規則 (PascalCase / camelCase) ####
#################################

dotnet_naming_rule.private_static_field_should_be_begins_with_s_.severity = suggestion  ## プライベート静的フィールドの命名は `s_` を先頭につけることを推奨
dotnet_naming_rule.private_field_should_be_begins_with__.severity = suggestion  ## プライベートフィールドの命名は `_` を先頭につけることを推奨
dotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion  ## メソッドのパラメータ名は `camelCase` にすることを推奨
dotnet_naming_rule.local_variable_should_be_camel_case.severity = suggestion  ## ローカル変数名は `camelCase` にすることを推奨
dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion  ## インターフェース名は `I` で始めることを推奨
dotnet_naming_rule.class_should_be_pascal_case.severity = suggestion  ## クラス名は `PascalCase` にすることを推奨
dotnet_naming_rule.method_should_be_pascal_case.severity = suggestion  ## メソッド名は `PascalCase` にすることを推奨
dotnet_naming_rule.property_should_be_pascal_case.severity = suggestion  ## プロパティ名は `PascalCase` にすることを推奨


#################################
#### 9. フィールド・パラメーター・抑制設定 ####
#################################

# フィールド設定
dotnet_style_readonly_field = true  ## フィールドが変更されない場合は `readonly` を付けることを推奨

# パラメーターの設定
dotnet_code_quality_unused_parameters = non_public  ## 未使用のパラメータに対する警告を「非公開メソッドのみに限定」

# 抑制の設定（コード分析の抑制ルール）
dotnet_remove_unnecessary_suppression_exclusions = none  ## 不要な抑制コメントの削除を行わない

#################################
#### 10. 改行とコードスタイル設定 ####
#################################

# 改行設定
dotnet_style_allow_multiple_blank_lines_experimental = false  ## 連続した複数の空行を許可しない
dotnet_style_allow_statement_immediately_after_block_experimental = true  ## `if` や `for` などのブロック `{}` の直後にステートメントを置くことを許可

#################################
#### 11. C# コーディング規則 (var, 式, 修飾子) ####
#################################

# `var` の使用ルール
csharp_style_var_elsewhere = false:suggestion  ## `var` ではなく明示的な型を使うことを推奨
csharp_style_var_for_built_in_types = false:suggestion  ## `int` や `string` などの組み込み型にも `var` を使用しない
csharp_style_var_when_type_is_apparent = false:suggestion  ## 型が明らかな場合でも `var` を使わず明示的な型を指定

# メンバーを式形式にする設定
csharp_style_expression_bodied_accessors = true  ## プロパティの `get` / `set` は式形式を推奨
csharp_style_expression_bodied_constructors = false  ## コンストラクタはブロック `{}` 形式を推奨
csharp_style_expression_bodied_indexers = true  ## インデクサーは式形式を推奨
csharp_style_expression_bodied_lambdas = true  ## ラムダ式は可能な限り短く
csharp_style_expression_bodied_local_functions = false  ## ローカル関数はブロック `{}` 形式を推奨
csharp_style_expression_bodied_methods = false  ## メソッドはブロック `{}` 形式を推奨
csharp_style_expression_bodied_operators = false  ## 演算子オーバーロードはブロック `{}` 形式を推奨
csharp_style_expression_bodied_properties = true  ## プロパティの `get` は式形式を推奨

#################################
#### 12. パターンマッチングの設定 ####
#################################

csharp_style_pattern_matching_over_as_with_null_check = true  ## `as` キャスト後の `null` チェックよりも `is` パターンマッチングを推奨
csharp_style_pattern_matching_over_is_with_cast_check = true  ## `is` チェック後のキャストよりも `is` パターンマッチングを推奨
csharp_style_prefer_extended_property_pattern = true  ## 拡張プロパティパターンを推奨
csharp_style_prefer_not_pattern = true  ## `!(x is int)` の代わりに `x is not int` を推奨
csharp_style_prefer_pattern_matching = true  ## 可能な場合は `switch` 文ではなく `switch` 式を使用
csharp_style_prefer_switch_expression = true  ## `switch` 文の代わりに `switch` 式を推奨

#################################
#### 13. Null チェックの設定 ####
#################################

csharp_style_conditional_delegate_call = true  ## `if (handler != null) handler.Invoke()` ではなく `handler?.Invoke()` を推奨

#################################
#### 14. 修飾子の設定 ####
#################################

csharp_prefer_static_anonymous_function = true  ## `static` を付けた匿名関数を推奨（キャプチャを防ぐため）
csharp_prefer_static_local_function = true  ## `static` を付けたローカル関数を推奨（キャプチャを防ぐため）

# 修飾子の順序（C# の標準スタイル）
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async  

csharp_style_prefer_readonly_struct = true  ## `readonly struct` を推奨（構造体が変更されない場合）
csharp_style_prefer_readonly_struct_member = true  ## `readonly` をメンバーに付けることを推奨（構造体のメンバーが変更されない場合）

#################################
#### 15. コードブロックの設定 ####
#################################

csharp_prefer_braces = true  ## `if` や `for` などのブロックには必ず `{}` を付ける（単行でも省略しない）
csharp_prefer_simple_using_statement = false  ## `using` はブロック `{}` を付ける形を推奨
csharp_prefer_system_threading_lock = true  ## `lock (obj) {}` の代わりに `Monitor.Enter()` ではなく `lock` キーワードを使用
csharp_style_namespace_declarations = file_scoped:suggestion  ## 名前空間を `namespace X;` 形式にすることを推奨（ファイルスコープ）
csharp_style_prefer_method_group_conversion = true  ## `x => x.DoSomething()` の代わりに `DoSomething` メソッドグループを推奨
csharp_style_prefer_primary_constructors = true  ## C# 12 のプライマリコンストラクタ（`class Sample(int id) {}`）を推奨
csharp_style_prefer_top_level_statements = true  ## トップレベルステートメントを推奨（`Main` メソッドなしの C# スクリプト形式）

#################################
#### 16. 式レベルの設定 ####
#################################

csharp_prefer_simple_default_expression = true  ## `default(int)` の代わりに `default` を推奨
csharp_style_deconstructed_variable_declaration = true  ## `var (x, y) = tuple;` 形式を推奨（分解代入）
csharp_style_implicit_object_creation_when_type_is_apparent = true  ## `new()` 形式を推奨（型が明らかな場合）
csharp_style_inlined_variable_declaration = true  ## `out` パラメータの変数宣言をインラインで記述
csharp_style_prefer_index_operator = true  ## `array[^1]` を推奨（インデックス演算子の使用）
csharp_style_prefer_local_over_anonymous_function = true  ## `Func<int, int> f = x => x + 1;` よりも `static int AddOne(int x) => x + 1;` を推奨
csharp_style_prefer_null_check_over_type_check = true  ## `obj is null` を推奨（`obj == null` の代わりに）
csharp_style_prefer_range_operator = true  ## `list.Take(3)` の代わりに `list[..3]` を推奨（範囲演算子）
csharp_style_prefer_tuple_swap = true  ## `(a, b) = (b, a);` 形式の変数スワップを推奨
csharp_style_prefer_utf8_string_literals = true  ## `u8` 接尾辞を使用した UTF-8 文字列リテラルを推奨
csharp_style_throw_expression = true  ## `throw` を式として使用することを推奨（例: `return x ?? throw new Exception();`）
csharp_style_unused_value_assignment_preference = discard_variable  ## 使わない変数の代わりに `_` を使用（`var _ = method();`）
csharp_style_unused_value_expression_statement_preference = discard_variable  ## 未使用の式評価結果は `_` を使う（例: `_ = Task.Run(() => {});`）

#################################
#### 17. 'using' ディレクティブの配置 ####
#################################

csharp_using_directive_placement = outside_namespace:suggestion  ## `using` を `namespace` の外側に置くことを推奨（.NET 7 以降の標準）

#################################
#### 18. 改行設定 ####
#################################

csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true  ## コンストラクタ初期化子の `:` の後に改行を許可
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true  ## `=>` の後に改行を許可
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true  ## `?` や `:` の後に改行を許可
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:suggestion  ## `{}` の間に余計な改行を入れない
csharp_style_allow_embedded_statements_on_same_line_experimental = true  ## `if` や `for` などの中の単行ステートメントを `{}` なしで記述可能

#################################
#### 19. C# 書式ルール ####
#################################

# 改行設定（コードの可読性向上）
csharp_new_line_before_catch = true  ## `catch` の前に改行を入れる（例外処理を見やすくする）
csharp_new_line_before_else = true  ## `else` の前に改行を入れる
csharp_new_line_before_finally = true  ## `finally` の前に改行を入れる
csharp_new_line_before_members_in_anonymous_types = true  ## 匿名型 `{}` 内のメンバーの前に改行を入れる
csharp_new_line_before_members_in_object_initializers = true  ## オブジェクト初期化子 `{}` 内のメンバーの前に改行を入れる
csharp_new_line_before_open_brace = all  ## `{` を常に新しい行に配置
csharp_new_line_between_query_expression_clauses = true  ## LINQ クエリの各句 (`from`, `where`, `select` など) の間に改行を入れる

#################################
#### 20. インデント設定 ####
#################################

csharp_indent_block_contents = true  ## `{}` 内のブロックの内容をインデントする
csharp_indent_braces = false  ## `{}` のインデントをしない
csharp_indent_case_contents = true  ## `case` の内容をインデントする
csharp_indent_case_contents_when_block = true  ## `case` に `{}` がある場合もインデントする
csharp_indent_labels = one_less_than_current  ## ラベル (`case`, `default`) は 1 レベル上のインデントに配置
csharp_indent_switch_labels = true  ## `switch` 文の `case` ラベルをインデントする

#################################
#### 21. スペース設定 ####
#################################

csharp_space_after_cast = false  ## キャスト演算子 `()` の後にスペースを入れない（例: `(int)x`）
csharp_space_after_colon_in_inheritance_clause = true  ## 継承関係 (`class A : B`) の `:` の後にスペースを入れる
csharp_space_after_comma = true  ## カンマの後にスペースを入れる
csharp_space_after_dot = false  ## `.` の後にスペースを入れない（例: `obj.Method()`）
csharp_space_after_keywords_in_control_flow_statements = true  ## `if`, `for`, `while` などの後にスペースを入れる
csharp_space_after_semicolon_in_for_statement = true  ## `for` 文の `;` の後にスペースを入れる
csharp_space_around_binary_operators = before_and_after  ## 二項演算子 (`+`, `-`, `*`, `/`, `==`) の前後にスペースを入れる
csharp_space_around_declaration_statements = false  ## 宣言 (`int x = 10;`) の前後にスペースを入れない
csharp_space_before_colon_in_inheritance_clause = true  ## 継承関係 (`class A : B`) の `:` の前にスペースを入れる
csharp_space_before_comma = false  ## カンマの前にスペースを入れない
csharp_space_before_dot = false  ## `.` の前にスペースを入れない（例: `obj.Method()`）
csharp_space_before_open_square_brackets = false  ## 配列 `[]` の前にスペースを入れない
csharp_space_before_semicolon_in_for_statement = false  ## `for` 文の `;` の前にスペースを入れない
csharp_space_between_empty_square_brackets = false  ## `[]` の間にスペースを入れない（例: `int[] arr;`）
csharp_space_between_method_call_empty_parameter_list_parentheses = false  ## 空の `()` の間にスペースを入れない（例: `Method()`）
csharp_space_between_method_call_name_and_opening_parenthesis = false  ## メソッド名と `(` の間にスペースを入れない（例: `Method()`）
csharp_space_between_method_call_parameter_list_parentheses = false  ## `()` の間にスペースを入れない（例: `Method(x, y)`）
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false  ## 空のパラメータリスト `()` の間にスペースを入れない
csharp_space_between_method_declaration_name_and_open_parenthesis = false  ## メソッド名と `(` の間にスペースを入れない
csharp_space_between_method_declaration_parameter_list_parentheses = false  ## `()` の間にスペースを入れない（例: `void Method(int x, int y)`）
csharp_space_between_parentheses = false  ## `()` の内側にスペースを入れない（例: `(x + y)`）
csharp_space_between_square_brackets = false  ## `[]` の内側にスペースを入れない（例: `arr[0]`）

#################################
#### 22. 折り返しの設定 ####
#################################

csharp_preserve_single_line_blocks = true  ## 1行に収まる `{}` のブロックはそのままにする（折り返さない）
csharp_preserve_single_line_statements = true  ## 1行のステートメントはそのままにする（折り返さない）

#################################
#### 23. 命名スタイル ####
#################################

# **プライベート静的フィールド**
dotnet_naming_rule.private_static_field_should_be_begins_with_s_.severity = suggestion  ## プライベート静的フィールドのプレフィックスを `s_` にすることを推奨
dotnet_naming_rule.private_static_field_should_be_begins_with_s_.symbols = private_static_field
dotnet_naming_rule.private_static_field_should_be_begins_with_s_.style = begins_with_s_

# **プライベートフィールド**
dotnet_naming_rule.private_field_should_be_begins_with__.severity = suggestion  ## プライベートフィールドのプレフィックスを `_` にすることを推奨
dotnet_naming_rule.private_field_should_be_begins_with__.symbols = private_field
dotnet_naming_rule.private_field_should_be_begins_with__.style = begins_with__

# **メソッドパラメータ**
dotnet_naming_rule.parameters_should_be_camel_case.severity = suggestion  ## メソッドのパラメータ名は `camelCase` にすることを推奨
dotnet_naming_rule.parameters_should_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_should_be_camel_case.style = camel_case

# **ローカル変数**
dotnet_naming_rule.local_variable_should_be_camel_case.severity = suggestion  ## ローカル変数名は `camelCase` にすることを推奨
dotnet_naming_rule.local_variable_should_be_camel_case.symbols = local_variable
dotnet_naming_rule.local_variable_should_be_camel_case.style = camel_case

# **インターフェース**
dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion  ## インターフェース名は `I` をプレフィックスとすることを推奨
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# **クラス**
dotnet_naming_rule.class_should_be_pascal_case.severity = suggestion  ## クラス名は `PascalCase` にすることを推奨
dotnet_naming_rule.class_should_be_pascal_case.symbols = class
dotnet_naming_rule.class_should_be_pascal_case.style = pascal_case

# **構造体**
dotnet_naming_rule.struct_should_be_pascal_case.severity = suggestion  ## 構造体名は `PascalCase` にすることを推奨
dotnet_naming_rule.struct_should_be_pascal_case.symbols = struct
dotnet_naming_rule.struct_should_be_pascal_case.style = pascal_case

# **列挙型**
dotnet_naming_rule.enum_should_be_pascal_case.severity = suggestion  ## 列挙型の名前は `PascalCase` にすることを推奨
dotnet_naming_rule.enum_should_be_pascal_case.symbols = enum
dotnet_naming_rule.enum_should_be_pascal_case.style = pascal_case

# **デリゲート**
dotnet_naming_rule.delegate_should_be_pascal_case.severity = suggestion  ## デリゲートの名前は `PascalCase` にすることを推奨
dotnet_naming_rule.delegate_should_be_pascal_case.symbols = delegate
dotnet_naming_rule.delegate_should_be_pascal_case.style = pascal_case

# **イベント**
dotnet_naming_rule.event_should_be_pascal_case.severity = suggestion  ## イベントの名前は `PascalCase` にすることを推奨
dotnet_naming_rule.event_should_be_pascal_case.symbols = event
dotnet_naming_rule.event_should_be_pascal_case.style = pascal_case

# **メソッド**
dotnet_naming_rule.method_should_be_pascal_case.severity = suggestion  ## メソッドの名前は `PascalCase` にすることを推奨
dotnet_naming_rule.method_should_be_pascal_case.symbols = method
dotnet_naming_rule.method_should_be_pascal_case.style = pascal_case

# **プライベートメソッド**
dotnet_naming_rule.private_method_should_be_pascal_case.severity = suggestion  ## プライベートメソッドの名前も `PascalCase` にすることを推奨
dotnet_naming_rule.private_method_should_be_pascal_case.symbols = private_method
dotnet_naming_rule.private_method_should_be_pascal_case.style = pascal_case

# **抽象メソッド**
dotnet_naming_rule.abstract_method_should_be_pascal_case.severity = suggestion  ## 抽象メソッドの名前は `PascalCase` にすることを推奨
dotnet_naming_rule.abstract_method_should_be_pascal_case.symbols = abstract_method
dotnet_naming_rule.abstract_method_should_be_pascal_case.style = pascal_case

# **静的メソッド**
dotnet_naming_rule.static_method_should_be_pascal_case.severity = suggestion  ## 静的メソッドの名前は `PascalCase` にすることを推奨
dotnet_naming_rule.static_method_should_be_pascal_case.symbols = static_method
dotnet_naming_rule.static_method_should_be_pascal_case.style = pascal_case

# **プロパティ**
dotnet_naming_rule.property_should_be_pascal_case.severity = suggestion  ## プロパティ名は `PascalCase` にすることを推奨
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = pascal_case

# **パブリックまたはプロテクトなフィールド**
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.severity = suggestion  ## `public/protected` フィールドは `PascalCase` にすることを推奨
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.symbols = public_or_protected_field
dotnet_naming_rule.public_or_protected_field_should_be_pascal_case.style = pascal_case

# **静的フィールド**
dotnet_naming_rule.static_field_should_be_pascal_case.severity = suggestion  ## 静的フィールドは `PascalCase` にすることを推奨
dotnet_naming_rule.static_field_should_be_pascal_case.symbols = static_field
dotnet_naming_rule.static_field_should_be_pascal_case.style = pascal_case

#################################
#### 24. 記号の仕様 ####
#################################

# **クラスの適用範囲**
dotnet_naming_symbols.class.applicable_kinds = class  ## クラスに適用
dotnet_naming_symbols.class.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.class.required_modifiers =  ## 特定の修飾子は不要

# **インターフェースの適用範囲**
dotnet_naming_symbols.interface.applicable_kinds = interface  ## インターフェースに適用
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.interface.required_modifiers =  ## 特定の修飾子は不要

# **構造体の適用範囲**
dotnet_naming_symbols.struct.applicable_kinds = struct  ## 構造体に適用
dotnet_naming_symbols.struct.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.struct.required_modifiers =  ## 特定の修飾子は不要

# **列挙型の適用範囲**
dotnet_naming_symbols.enum.applicable_kinds = enum  ## 列挙型に適用
dotnet_naming_symbols.enum.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.enum.required_modifiers =  ## 特定の修飾子は不要

# **デリゲートの適用範囲**
dotnet_naming_symbols.delegate.applicable_kinds = delegate  ## デリゲートに適用
dotnet_naming_symbols.delegate.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.delegate.required_modifiers =  ## 特定の修飾子は不要

# **イベントの適用範囲**
dotnet_naming_symbols.event.applicable_kinds = event  ## イベントに適用
dotnet_naming_symbols.event.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.event.required_modifiers =  ## 特定の修飾子は不要

# **メソッドの適用範囲**
dotnet_naming_symbols.method.applicable_kinds = method  ## メソッドに適用
dotnet_naming_symbols.method.applicable_accessibilities = public  ## パブリックメソッドのみに適用
dotnet_naming_symbols.method.required_modifiers =  ## 特定の修飾子は不要

# **プライベートメソッドの適用範囲**
dotnet_naming_symbols.private_method.applicable_kinds = method  ## プライベートメソッドに適用
dotnet_naming_symbols.private_method.applicable_accessibilities = private  ## プライベートメソッドのみに適用
dotnet_naming_symbols.private_method.required_modifiers =  ## 特定の修飾子は不要

# **抽象メソッドの適用範囲**
dotnet_naming_symbols.abstract_method.applicable_kinds = method  ## 抽象メソッドに適用
dotnet_naming_symbols.abstract_method.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.abstract_method.required_modifiers = abstract  ## `abstract` 修飾子が必須

# **静的メソッドの適用範囲**
dotnet_naming_symbols.static_method.applicable_kinds = method  ## 静的メソッドに適用
dotnet_naming_symbols.static_method.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.static_method.required_modifiers = static  ## `static` 修飾子が必須

# **プロパティの適用範囲**
dotnet_naming_symbols.property.applicable_kinds = property  ## プロパティに適用
dotnet_naming_symbols.property.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.property.required_modifiers =  ## 特定の修飾子は不要

# **パブリックまたはプロテクトなフィールドの適用範囲**
dotnet_naming_symbols.public_or_protected_field.applicable_kinds = field  ## パブリックまたはプロテクトなフィールドに適用
dotnet_naming_symbols.public_or_protected_field.applicable_accessibilities = public, protected  ## `public` または `protected` のみに適用
dotnet_naming_symbols.public_or_protected_field.required_modifiers =  ## 特定の修飾子は不要

# **静的フィールドの適用範囲**
dotnet_naming_symbols.static_field.applicable_kinds = field  ## 静的フィールドに適用
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected  ## すべてのアクセス修飾子で適用
dotnet_naming_symbols.static_field.required_modifiers = static  ## `static` 修飾子が必須

# **プライベート静的フィールドの適用範囲**
dotnet_naming_symbols.private_static_field.applicable_kinds = field  ## プライベート静的フィールドに適用
dotnet_naming_symbols.private_static_field.applicable_accessibilities = private  ## `private` のみに適用
dotnet_naming_symbols.private_static_field.required_modifiers = static  ## `static` 修飾子が必須

# **メソッドパラメータの適用範囲**
dotnet_naming_symbols.parameters.applicable_kinds = parameter  ## メソッドのパラメータに適用
dotnet_naming_symbols.parameters.applicable_accessibilities = *  ## すべてのパラメータに適用
dotnet_naming_symbols.parameters.required_modifiers =  ## 特定の修飾子は不要

# **ローカル変数の適用範囲**
dotnet_naming_symbols.local_variable.applicable_kinds = local  ## ローカル変数に適用
dotnet_naming_symbols.local_variable.applicable_accessibilities = *  ## すべてのローカル変数に適用
dotnet_naming_symbols.local_variable.required_modifiers =  ## 特定の修飾子は不要

# **プライベートフィールドの適用範囲**
dotnet_naming_symbols.private_field.applicable_kinds = field  ## プライベートフィールドに適用
dotnet_naming_symbols.private_field.applicable_accessibilities = private  ## `private` のみに適用
dotnet_naming_symbols.private_field.required_modifiers =  ## 特定の修飾子は不要

#################################
#### 25. 命名スタイル ####
#################################

# **PascalCase 命名スタイル**
dotnet_naming_style.pascal_case.required_prefix =  ## プレフィックスなし
dotnet_naming_style.pascal_case.required_suffix =  ## サフィックスなし
dotnet_naming_style.pascal_case.word_separator =  ## 単語区切りなし
dotnet_naming_style.pascal_case.capitalization = pascal_case  ## `PascalCase`（例: `MyClass`, `MyProperty`）

# **インターフェース命名スタイル（I をプレフィックスとして使用）**
dotnet_naming_style.begins_with_i.required_prefix = I  ## `I` をプレフィックスとして付与（例: `IService`, `IRepository`）
dotnet_naming_style.begins_with_i.required_suffix =  ## サフィックスなし
dotnet_naming_style.begins_with_i.word_separator =  ## 単語区切りなし
dotnet_naming_style.begins_with_i.capitalization = pascal_case  ## `PascalCase`（例: `IShape`, `IFormatter`）

# **プライベートフィールド命名スタイル（アンダースコア `_` をプレフィックスとして使用）**
dotnet_naming_style.begins_with__.required_prefix = _  ## `_` をプレフィックスとして付与（例: `_fieldName`）
dotnet_naming_style.begins_with__.required_suffix =  ## サフィックスなし
dotnet_naming_style.begins_with__.word_separator =  ## 単語区切りなし
dotnet_naming_style.begins_with__.capitalization = camel_case  ## `camelCase`（例: `_database`, `_logger`）

# **camelCase 命名スタイル（ローカル変数やメソッドのパラメータに使用）**
dotnet_naming_style.camel_case.required_prefix =  ## プレフィックスなし
dotnet_naming_style.camel_case.required_suffix =  ## サフィックスなし
dotnet_naming_style.camel_case.word_separator =  ## 単語区切りなし
dotnet_naming_style.camel_case.capitalization = camel_case  ## `camelCase`（例: `myVariable`, `filePath`）

# **プライベート静的フィールド命名スタイル（`s_` をプレフィックスとして使用）**
dotnet_naming_style.begins_with_s_.required_prefix = s_  ## `s_` をプレフィックスとして付与（例: `s_instance`）
dotnet_naming_style.begins_with_s_.required_suffix =  ## サフィックスなし
dotnet_naming_style.begins_with_s_.word_separator =  ## 単語区切りなし
dotnet_naming_style.begins_with_s_.capitalization = camel_case  ## `camelCase`（例: `s_defaultConnection`, `s_cacheManager`）